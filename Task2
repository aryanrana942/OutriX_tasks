import cv2
import numpy as np
import os
from PIL import Image
import pickle

class FaceRecognitionSystem:
    def __init__(self):
        # Initialize face detector and recognizer
        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        self.recognizer = cv2.face.LBPHFaceRecognizer_create()
        
        # Create directories if they don't exist
        self.create_directories()
        
        # Storage for face data
        self.face_id_map = {}
        self.next_id = 0
        
    def create_directories(self):
        """Create necessary directories for storing data"""
        directories = ['dataset', 'trainer']
        for directory in directories:
            if not os.path.exists(directory):
                os.makedirs(directory)
                
    def capture_faces(self, person_name, num_samples=30):
        """Capture face samples for training"""
        # Load existing face ID map or create new one
        self.load_face_id_map()
        
        # Get or assign face ID
        if person_name not in self.face_id_map:
            self.face_id_map[person_name] = self.next_id
            self.next_id += 1
            
        face_id = self.face_id_map[person_name]
        
        # Initialize camera
        cap = cv2.VideoCapture(0)
        count = 0
        
        print(f"Capturing faces for {person_name} (ID: {face_id})")
        print("Press 'q' to quit early")
        
        while count < num_samples:
            ret, frame = cap.read()
            if not ret:
                break
                
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(gray, 1.3, 5)
            
            for (x, y, w, h) in faces:
                # Draw rectangle around face
                cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
                
                # Save face image
                count += 1
                cv2.imwrite(f"dataset/User.{face_id}.{count}.jpg", gray[y:y+h, x:x+w])
                
                # Display count on frame
                cv2.putText(frame, f'Samples: {count}/{num_samples}', (x, y-10), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 0, 0), 2)
            
            cv2.imshow('Capturing Faces', frame)
            
            # Break on 'q' key press
            if cv2.waitKey(100) & 0xFF == ord('q'):
                break
                
        cap.release()
        cv2.destroyAllWindows()
        
        # Save updated face ID map
        self.save_face_id_map()
        
        print(f"Captured {count} samples for {person_name}")
        
    def train_recognizer(self):
        """Train the face recognizer with captured images"""
        path = 'dataset'
        
        # Get all image paths and corresponding labels
        image_paths = [os.path.join(path, f) for f in os.listdir(path)]
        face_samples = []
        ids = []
        
        print("Training recognizer...")
        
        for image_path in image_paths:
            # Extract ID from filename
            try:
                id = int(os.path.split(image_path)[-1].split(".")[1])
                
                # Load and convert image to grayscale
                pil_image = Image.open(image_path).convert('L')
                image_np = np.array(pil_image, 'uint8')
                
                faces = self.face_cascade.detectMultiScale(image_np)
                
                # Add face data to training set
                for (x, y, w, h) in faces:
                    face_samples.append(image_np[y:y+h, x:x+w])
                    ids.append(id)
                    
            except (ValueError, IndexError):
                print(f"Skipping invalid image: {image_path}")
                continue
        
        if len(face_samples) == 0:
            print("No face samples found for training!")
            return
            
        # Train the recognizer
        self.recognizer.train(face_samples, np.array(ids))
        
        # Save the trained model
        self.recognizer.write('trainer/trainer.yml')
        print(f"Model trained with {len(face_samples)} samples")
        
    def load_face_id_map(self):
        """Load face ID mapping from file"""
        try:
            with open('trainer/face_id_map.pkl', 'rb') as f:
                data = pickle.load(f)
                self.face_id_map = data['face_id_map']
                self.next_id = data['next_id']
        except FileNotFoundError:
            self.face_id_map = {}
            self.next_id = 0
            
    def save_face_id_map(self):
        """Save face ID mapping to file"""
        data = {
            'face_id_map': self.face_id_map,
            'next_id': self.next_id
        }
        with open('trainer/face_id_map.pkl', 'wb') as f:
            pickle.dump(data, f)
            
    def get_name_from_id(self, face_id):
        """Get person name from face ID"""
        for name, id in self.face_id_map.items():
            if id == face_id:
                return name
        return "Unknown"
        
    def recognize_faces(self):
        """Real-time face recognition"""
        # Load trained model
        try:
            self.recognizer.read('trainer/trainer.yml')
            self.load_face_id_map()
        except:
            print("No trained model found! Please train the recognizer first.")
            return
            
        # Initialize camera
        cap = cv2.VideoCapture(0)
        
        print("Starting face recognition...")
        print("Press 'q' to quit")
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
                
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(gray, 1.2, 5, minSize=(100, 100))
            
            for (x, y, w, h) in faces:
                # Draw rectangle around face
                cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
                
                # Recognize face
                id, confidence = self.recognizer.predict(gray[y:y+h, x:x+w])
                
                # Determine recognition result
                if confidence < 50:  # Lower is better for LBPH
                    name = self.get_name_from_id(id)
                    confidence_text = f"{round(100 - confidence)}%"
                else:
                    name = "Unknown"
                    confidence_text = f"{round(100 - confidence)}%"
                
                # Display name and confidence
                cv2.putText(frame, name, (x+5, y-5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
                cv2.putText(frame, confidence_text, (x+5, y+h-5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 1)
            
            cv2.imshow('Face Recognition', frame)
            
            # Break on 'q' key press
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
                
        cap.release()
        cv2.destroyAllWindows()
        
    def list_registered_faces(self):
        """List all registered faces"""
        self.load_face_id_map()
        if self.face_id_map:
            print("\nRegistered faces:")
            for name, id in self.face_id_map.items():
                print(f"- {name} (ID: {id})")
        else:
            print("No faces registered yet.")

def main():
    """Main function to run the face recognition system"""
    fr_system = FaceRecognitionSystem()
    
    while True:
        print("\n=== Face Recognition System ===")
        print("1. Capture faces for training")
        print("2. Train recognizer")
        print("3. Start face recognition")
        print("4. List registered faces")
        print("5. Exit")
        
        choice = input("\nEnter your choice (1-5): ").strip()
        
        if choice == '1':
            name = input("Enter person's name: ").strip()
            if name:
                num_samples = input("Enter number of samples (default 30): ").strip()
                try:
                    num_samples = int(num_samples) if num_samples else 30
                except ValueError:
                    num_samples = 30
                fr_system.capture_faces(name, num_samples)
            else:
                print("Please enter a valid name!")
                
        elif choice == '2':
            fr_system.train_recognizer()
            
        elif choice == '3':
            fr_system.recognize_faces()
            
        elif choice == '4':
            fr_system.list_registered_faces()
            
        elif choice == '5':
            print("Goodbye!")
            break
            
        else:
            print("Invalid choice! Please try again.")

if __name__ == "__main__":
    main()
